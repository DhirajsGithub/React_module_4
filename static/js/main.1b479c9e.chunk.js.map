{"version":3,"sources":["components/Login/Login.module.css","components/UI/Input/Input.module.css","components/UI/Card/Card.module.css","components/UI/Button/Button.module.css","components/Home/Home.module.css","components/MainHeader/Navigation.module.css","components/MainHeader/MainHeader.module.css","components/UI/Card/Card.js","components/UI/Button/Button.js","store/auth-context.js","components/UI/Input/Input.js","components/Login/LoginUseReducer.js","components/Home/Home.js","components/MainHeader/Navigation.js","components/MainHeader/MainHeader.js","App.js","index.js"],"names":["module","exports","Card","props","className","classes","card","children","Button","type","button","onClick","disabled","AuthContext","React","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","useState","setIsLoggedIn","storedUserLoginInfo","localStorage","getItem","useEffect","console","log","Provider","value","removeItem","setItem","Input","forwardRef","ref","inputRef","useRef","activate","current","focus","useImperativeHandle","control","isValid","invalid","htmlFor","id","label","onChange","onBlur","emailReducer","state","action","val","includes","passwordReducer","trim","length","LoginUseReducer","formIsValid","setFormIsValid","useReducer","emailState","dispatchEmail","passwordState","dispatchPassword","autCtx","useContext","emailIsValided","passwordIsValided","identifier","setTimeout","clearTimeout","emailInputRef","passwordInputRef","login","onSubmit","event","preventDefault","target","actions","btn","Home","authCtx","home","Navigation","ctx","nav","href","MainHeader","App","Fragment","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.1b479c9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2Px22\",\"control\":\"Login_control__1O9dn\",\"invalid\":\"Login_invalid__1Kvhn\",\"actions\":\"Login_actions__1b5Oz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Input_login__1OO0u\",\"control\":\"Input_control__7JYPz\",\"invalid\":\"Input_invalid__1XscM\",\"actions\":\"Input_actions__Xyiys\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1te4P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2lgkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__3idT9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__JfAVK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-header\":\"MainHeader_main-header__2OmAM\"};","import React from 'react';\n\nimport classes from './Card.module.css';\n\nconst Card = (props) => {\n  return (\n    <div className={`${classes.card} ${props.className}`}>{props.children}</div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst Button = (props) => {\n  return (\n    <button\n      type={props.type || 'button'}\n      className={`${classes.button} ${props.className}`}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\n\nconst AuthContext = React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin : (email, password)=>{}\n});\n\nexport default AuthContext;\n\nexport const AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const storedUserLoginInfo = localStorage.getItem('isLoggedIn');\n  useEffect(()=>{\n    console.log(\"Hi Iam useEffect you only see this message after certain dependencies get changedf\")\n     if(storedUserLoginInfo){\n    setIsLoggedIn(true)\n  }\n  }, [])\n\n  const loginHandler = (email, password) => {\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return <AuthContext.Provider\n  value={{ \n      isLoggedIn : isLoggedIn,  \n      onLogout : logoutHandler,\n      onLogin : loginHandler   \n  }}\n  >{props.children}</AuthContext.Provider>;\n};\n\n// import React from 'react';\n\n// const AuthContext = React.createContext({\n//     isLoggedIn : false,\n//    onLogout: ()=>{}\n// })\n\n// export default AuthContext;\n","import React,{useRef, useImperativeHandle} from 'react'\nimport classes from './Input.module.css'\n\n// const Input = (props) => {\nconst Input = React.forwardRef((props, ref) => {\n    // we can accept refs as argument if a ref should be set from outside\n    // we need to wrap and export our component in sepcail way\n\n    const inputRef = useRef();\n\n    const activate = () => {\n        inputRef.current.focus();\n      };\n\n      useImperativeHandle(ref, () => {\n          // to establish the connection from outside first arument is ref which is taken as argument \n        // which value should be accessible from outside through that name\n        return {\n          focus: activate,\n        };\n      });\n\n  return (\n    <div\n    className={`${classes.control} ${\n      props.isValid === false ? classes.invalid : ''\n    }`}\n  >\n    <label htmlFor={props.id}>{props.label}</label>\n    <input\n      ref={inputRef}\n      type={props.type}\n      id={props.id}\n      value={props.value}\n      onChange={props.onChange}\n      // The onblur attribute fires the moment that the element loses focus. Onblur is most often used with form validation code (e.g. when the user leaves a form field).\n      onBlur={props.onBlur}\n    />\n  </div>\n  )\n})\n\nexport default Input","import React, { useState, useEffect, useReducer, useContext, useRef } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport Input from \"../UI/Input/Input\";\n\n// All the data which will be required and used inside of the reducer function will be passed into this function when it's executed by React, automatically.\nconst emailReducer = (state, action) => {\n  // handling the action cause by dispatchEmail fun\n  if (action.type === \"USER_INPUT\") {\n    // updating both validity and value whenever we receive user input action\n    return { value: action.val, isValid: action.val.includes(\"@\") };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    // state is the snapshot when action.type === 'USER_INPUT' is hit or the previous value of the input\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n  }\n\n  // initial state\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst LoginUseReducer = (props) => {\n  //   const [enteredEmail, setEnteredEmail] = useState('');\n  //   const [emailIsValid, setEmailIsValid] = useState();\n  //   const [enteredPassword, setEnteredPassword] = useState('');\n  //   const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  //   isValid is set to null coz invalid property(we created) must not be apply initially without enterting any value\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null,\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const autCtx = useContext(AuthContext);\n\n  // optimising the useEffect hook\n  //   whenever just the value changes and the validity did not change, this effect will not rerun.\n  const { isValid: emailIsValided } = emailState; // we used an alias to pull out isValid as emailIsValided\n  const { isValid: passwordIsValided = passwordState } = passwordState;\n  // this can be used whenever some props changed\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form Validity\");\n      setFormIsValid(emailIsValided && passwordIsValided);\n    }, 500);\n    return () => {\n      console.log(\"Clean Up\");\n      clearTimeout(identifier);\n    };\n\n    //   },[emailState, passwordState])\n  }, [emailIsValided, passwordIsValided]);\n  // if we had used emailState.isValid here then ANY property of emailState changes not just isValid effect function would re-run\n\n  const emailChangeHandler = (event) => {\n    // setEnteredEmail(event.target.value);\n    // dispatchEmail(someIdentifier, can be String, number often object is prefferred)\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n    // val: event.target.value  --> payload\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    // setEnteredPassword(event.target.value);\n\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    // //   event.target.value.trim().length > 6 && enteredEmail.includes('@')\n    //   event.target.value.trim().length > 6 && emailState.isValid\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    // we are setting the state based on the outdated state\n    // we could use the functional form of setState but that is only valid for that state not other state\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({ type: \"INPUT_BLUR\" });\n  };\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if(formIsValid){\n      // passing the value to onLogin\n      autCtx.onLogin(emailState.value, passwordState.value);\n    }else if(!emailIsValided){\n      emailInputRef.current.focus();\n    }else{\n      passwordInputRef.current.focus();\n    }\n    \n  };\n\n \n  \n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <Input\n          id=\"email\"\n          label=\"E-Mail\"\n          type=\"email\"\n          isValid={emailIsValided}\n          value={emailState.value}\n          onBlur={validateEmailHandler}\n          onChange={emailChangeHandler }\n          ref={emailInputRef}\n        />\n        <Input\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          isValid={passwordIsValided}\n          value={passwordState.value}\n          onBlur={validatePasswordHandler}\n          onChange={passwordChangeHandler }\n          ref ={passwordInputRef }\n        />\n        \n        <div className={classes.actions}>\n          {/* <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}> */}\n          <Button type=\"submit\" className={classes.btn}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default LoginUseReducer;\n\n// when your state becomes more complex,\n// bigger and combines multiple related states,\n// useReducer can also be worth a closer look.\n\n/*\nuseState() vs useReducer()\nWhen using useState() becomes cumbersome or you're getting a lot of bugs/unintended behaviours\n\nuseState()\nThe main state management \"tool\"\nGreat for independent pieces of state/data\nGreat if state updates are easy and limited to a few kinds of updates\n\n\nuseReducer()\nGreat if you need \"more power\"\nshould be considered if you have related pieces of state/data\ncan be helpful if you have more complex state updates\n */\n","import React,{ useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport Button from '../UI/Button/Button';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Home.module.css';\n\nconst Home = (props) => {\n  const authCtx = useContext(AuthContext)\n  return (\n    <Card className={classes.home}>\n      <h1>Welcome back!</h1>\n      <Button onClick={authCtx.onLogout}>Logout</Button>\n    </Card>\n  );\n};\n\nexport default Home;\n","import React,{ useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\n\nimport classes from './Navigation.module.css';\n\nconst Navigation = (props) => {\n  const ctx = useContext(AuthContext)\n  // using context using useContext react hook\n  return(\n    <nav className={classes.nav}>\n      <ul>\n        {ctx.isLoggedIn && (\n          <li>\n            <a href=\"/\">Users</a>\n          </li>\n        )}\n        {ctx.isLoggedIn && (\n          <li>\n            <a href=\"/\">Admin</a>\n          </li>\n        )}\n        {ctx.isLoggedIn && (\n          <li>\n          {/* triggering the Logout funtion from ctx  */}\n            <button onClick={ctx.onLogout}>Logout</button>\n          </li>\n        )}\n      </ul>\n    </nav>\n  )\n\n    // using context using .consumer\n  // return (\n  //   <AuthContext.Consumer>\n  //   {/* the consumer takes a child which actually should be a function */}\n  //   {/* if we are using .consumer with provider then there must be default value in the .provider component*/}\n  //   {(ctx)=>{\n  //     return (<nav className={classes.nav}>\n  //     <ul>\n  //       {ctx.isLoggedIn && (\n  //         <li>\n  //           <a href=\"/\">Users</a>\n  //         </li>\n  //       )}\n  //       {ctx.isLoggedIn && (\n  //         <li>\n  //           <a href=\"/\">Admin</a>\n  //         </li>\n  //       )}\n  //       {ctx.isLoggedIn && (\n  //         <li>\n  //           <button onClick={props.onLogout}>Logout</button>\n  //         </li>\n  //       )}\n  //     </ul>\n  //   </nav>)\n  //   }}\n   \n  //   </AuthContext.Consumer> \n  // );\n\n\n};\n\nexport default Navigation;\n","import React from 'react';\n\nimport Navigation from './Navigation';\nimport classes from './MainHeader.module.css';\n\nconst MainHeader = (props) => {\n  return (\n    <header className={classes['main-header']}>\n      <h1>A Typical Page</h1>\n      {/* <Navigation isLoggedIn={props.isAuthenticated} onLogout={props.onLogout} /> */}\n      <Navigation />\n    </header>\n  );\n};\n\nexport default MainHeader;\n","import React, { useState, useEffect, useContext  } from 'react';\n// import Login from './components/Login/Login';\nimport LoginUseReducer from './components/Login/LoginUseReducer';\nimport Home from './components/Home/Home';\nimport AuthContext from './store/auth-context';\nimport MainHeader from './components/MainHeader/MainHeader';\n\n\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // const storedUserLoginInfo = localStorage.getItem('isLoggedIn');      // will return 1 or 0 or whatever we set as second argument in localStorage.setItem()\n  // // if(storedUserLoginInfo){\n  // //   setIsLoggedIn(true)          // we are only allowed to set state in function\n  // // }\n  // // this leads to infinite loop coz we check if this is store if isLoggedIn is stored then we set  it to true then the page will render again it will see if isLoggedIn is stored\n  \n  // // NOTE: first all app.js page will run then after code inside useEffect will run the state is being change then again whole page will rerender but the code inside useEffect will run only if dependencies changed\n  // useEffect(()=>{\n  //   console.log(\"Hi Iam useEffect you only see this message after certain dependencies get changedf\")\n  //    if(storedUserLoginInfo){\n  //   setIsLoggedIn(true)\n  // }\n  // }, [])\n  // // when the dependency array is empty? It simply means that the hook will only trigger once when the component is first rendered. So for example, for useEffect it means the callback will run once at the beginning of the lifecycle of the component and never again\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem(\"isLoggedIn\", \"1\")\n  //   setIsLoggedIn(true);\n    \n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\")\n  //   setIsLoggedIn(false);\n  // };\n\n  const ctx = useContext(AuthContext);\n\n  return (\n  //   // <React.Fragment>\n  //   <AuthContext.Provider value={{ \n  //     isLoggedIn : isLoggedIn,  // from line 10\n  //     onLogout : logoutHandler    // can also pass a functio with context \n  // }} >\n  //     {/* <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} /> */}\n  //     <MainHeader />\n  //     <main>\n  //       {!isLoggedIn && <LoginUseReducer onLogin={loginHandler} />}\n  //       {isLoggedIn && <Home onLogout={logoutHandler} />}\n  //     </main>\n  //     </AuthContext.Provider>\n  //   // </React.Fragment>\n  <React.Fragment>\n      <MainHeader />\n      <main>\n        {!ctx.isLoggedIn && <LoginUseReducer />}\n        {ctx.isLoggedIn && <Home />}\n      </main>\n    </React.Fragment>\n  );\n}\n\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   const storedUserLoginInfo = localStorage.getItem('isLoggedIn');\n//   // if(storedUserLoginInfo){\n//   //   setIsLoggedIn(true)\n//   // }\n//   // this leads to infinite loop coz we check if this is store if isLoggedIn is stored then we set  it to true then the page will render again it will see if isLoggedIn is stored\n  \n//   // NOTE: first all app.js page will run then after code inside useEffect will run the state is being change then again whole page will rerender but the code inside useEffect will run only if dependencies changed\n//   useEffect(()=>{\n//     console.log(\"Hi Iam useEffect you only see this message after certain dependencies get changedf\")\n//      if(storedUserLoginInfo){\n//     setIsLoggedIn(true)\n//   }\n//   }, [])\n//   // when the dependency array is empty? It simply means that the hook will only trigger once when the component is first rendered. So for example, for useEffect it means the callback will run once at the beginning of the lifecycle of the component and never again\n\n//   const loginHandler = (email, password) => {\n//     // We should of course check email and password\n//     // But it's just a dummy/ demo anyways\n//     localStorage.setItem(\"isLoggedIn\", \"1\")\n//     setIsLoggedIn(true);\n    \n//   };\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem(\"isLoggedIn\")\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     // <React.Fragment>\n//     <AuthContext.Provider value={{ \n//       isLoggedIn : isLoggedIn,  // from line 10\n//       onLogout : logoutHandler    // can also pass a functio with context \n//   }} >\n//       {/* <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} /> */}\n//       <MainHeader />\n//       <main>\n//         {!isLoggedIn && <LoginUseReducer onLogin={loginHandler} />}\n//         {isLoggedIn && <Home onLogout={logoutHandler} />}\n//       </main>\n//       </AuthContext.Provider>\n//     // </React.Fragment>\n//   );\n// }\n\nexport default App;\n","\n   \nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\nimport { AuthContextProvider } from './store/auth-context';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <AuthContextProvider>\n    <App />\n  </AuthContextProvider>\n);\n"],"sourceRoot":""}